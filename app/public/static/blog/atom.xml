<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Multilatex Blog</title>
 <link href="http://multilatex.com/static/blog/atom.xml" rel="self"/>
 <link href="http://multilatex.com/blog"/>
 <updated>2013-12-19T00:02:59+02:00</updated>
 <id>http://multilatex.com/blog</id>
 <author>
   <name>Paul Nechifor</name>
   <email>paul@nechifor.net</email>
 </author>

 
 <entry>
   <title>Creating a Logo</title>
   <link href="http://multilatex.com/blog/creating-a-logo"/>
   <updated>2013-12-18T00:00:00+02:00</updated>
   <id>http://multilatex.com/blog/creating-a-logo</id>
   <content type="html">
&lt;p&gt;I though it was about time to add a logo to the site. I’m not a graphic designer so I just imitate what I can.&lt;/p&gt;

&lt;p&gt;The basics of a logo is that it has to have a unique twist that sets it apart and it also has to be usable. This means recognizable at different sizes and in different contexts.&lt;/p&gt;

&lt;p&gt;The theme is a mix of traditional publishing (coming from LaTeX) and modern web (this service). For this reason I chose an extra bold italic serif L from the &lt;a href=&quot;http://www.google.com/fonts/specimen/Simonetta&quot;&gt;Simonetta&lt;/a&gt; font (standing for “LaTeX”) and a preceding extra bold sans serif M from the &lt;a href=&quot;http://www.google.com/fonts/specimen/Changa+One&quot;&gt;Changa One&lt;/a&gt; font (standing for “Multi”). The M is superscripted as a homage to the way TeX and LaTeX are written. (You’ll have noticed that I never write Multilatex as MultiLaTeX because I believe it’s silly to mix up names and logos.) Someone could look at it and just see a single long looping curve, but there is a bit of reasoning behind it. To make it more visible I also created a rectangle one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/blog/img/logo.png&quot; alt=&quot;Multilatex logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I created the SVG with Inkscape and I used &lt;a href=&quot;http://fontello.com/&quot;&gt;Fontello&lt;/a&gt; to convert it to fonts usable in browsers.&lt;/p&gt;

&lt;p&gt;The whole favicon situation is horrible, so I used &lt;a href=&quot;http://iconifier.net/&quot;&gt;Iconifier&lt;/a&gt; to generate all the favicon sizes.&lt;/p&gt;

&lt;p&gt;I won’t go into styling the website any more now, so I haven’t picked a color theme. The logo will be just white or black.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sandboxing LaTeX</title>
   <link href="http://multilatex.com/blog/sandboxing-latex"/>
   <updated>2013-12-15T00:00:00+02:00</updated>
   <id>http://multilatex.com/blog/sandboxing-latex</id>
   <content type="html">
&lt;p&gt;TeX is a powerful language and thus it can be dangerous. Whenever executing arbitrary code from unknown sources one has to be careful.&lt;/p&gt;

&lt;p&gt;I will have to build a system in Node which sandboxes &lt;code&gt;pdflatex&lt;/code&gt; so that it can produce no harm to the rest of the system.&lt;/p&gt;

&lt;h2 id=&quot;shell_code&quot;&gt;Shell code&lt;/h2&gt;

&lt;p&gt;One of the first problems is that LaTeX can be made to execute arbitrary system commands with the &lt;code&gt;\write18{command}&lt;/code&gt; construct. This is usually disabled by default but it’s best to disable it completely with the &lt;code&gt;-no-shell-escape&lt;/code&gt; argument.&lt;/p&gt;

&lt;h2 id=&quot;bad_usage&quot;&gt;Bad usage&lt;/h2&gt;

&lt;p&gt;TeX is a Turing complete language so (as with C++ templates) one cannot determine ahead of time if compilation will ever finish.&lt;/p&gt;

&lt;p&gt;LaTeX is huge, so it’s likely there are many yet undiscovered problems in its packages that can be triggered to fill the memory or enter infinite loops.&lt;/p&gt;

&lt;p&gt;The best solution to these problems is to run the tasks as multiple Linux users which are limited appropriately. This means limiting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;where the user can write;&lt;/li&gt;

&lt;li&gt;how much virtual memory he can use (with &lt;code&gt;ulimits&lt;/code&gt;);&lt;/li&gt;

&lt;li&gt;how much CPU time he can use&lt;/li&gt;

&lt;li&gt;and others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Infinite loops can be managed by setting a time limit for generating the PDF after which the &lt;code&gt;pdflatex&lt;/code&gt; process is terminated.&lt;/p&gt;

&lt;p&gt;Bad usage could be intentional by malicious users, but it’s more likely that it’s accidental so human users should be presented with the errors.&lt;/p&gt;

&lt;h2 id=&quot;other&quot;&gt;Other&lt;/h2&gt;

&lt;p&gt;There are other ways you can influence the system like writing output files with the &lt;a href=&quot;http://tug.ctan.org/pkg/newfile&quot;&gt;newfile&lt;/a&gt; package. One could clog the system with large files. This is also solved by setting Linux user limits.&lt;/p&gt;

&lt;h2 id=&quot;doing_it&quot;&gt;Doing it&lt;/h2&gt;

&lt;p&gt;I am now in the process of writing the prototype for the site so I won’t be doing exactly this. I’ve actually added a disclaimer in the footer about the site being in pre-alpha.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Authentication</title>
   <link href="http://multilatex.com/blog/authentication"/>
   <updated>2013-12-13T00:00:00+02:00</updated>
   <id>http://multilatex.com/blog/authentication</id>
   <content type="html">
&lt;p&gt;In light of the somewhat recent revelations of &lt;a href=&quot;http://www.theguardian.com/technology/2013/nov/07/adobe-password-leak-can-check&quot;&gt;Adobe’s password leak&lt;/a&gt; I think it’s important to stress the importance of secure storage of passwords.&lt;/p&gt;

&lt;p&gt;I use the simple and secure method of hashing with SHA1 and unique salt. Technically, bcrypt is better, but I don’t have the hardware resources for that.&lt;/p&gt;

&lt;h2 id=&quot;hints&quot;&gt;Hints&lt;/h2&gt;

&lt;p&gt;Adobe’s leak included the password hints which led the the amusing suggestion by XKCD of creating &lt;a href=&quot;http://www.xkcd.com/1286/&quot;&gt;huge crossword puzzle&lt;/a&gt; which was eventually &lt;a href=&quot;https://news.ycombinator.com/item?id=6744754&quot;&gt;made&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I disagree with password hints exactly for this reason: it gives others ideas. If you forgot your password you’re better of reseting it.&lt;/p&gt;

&lt;h2 id=&quot;third_party_logins&quot;&gt;Third party logins&lt;/h2&gt;

&lt;p&gt;Some say that the best way to store passwords is to not do it at all: let other services handle that. I disagree with this because it’s not a good idea to depend on others.&lt;/p&gt;

&lt;p&gt;But if you do go down that path, which services should be allowed? &lt;a href=&quot;https://github.com/bnoguchi/everyauth&quot;&gt;Everyauth&lt;/a&gt;, which is a popular package for authentication in Node, supports more services than I can comfortably count.&lt;/p&gt;

&lt;p&gt;I’ve chosen to not do this for now, since it doesn’t bring me any benefit, but I might in the future add options for strategic ones like Dropbox and GitHub (for the purposes of integration).&lt;/p&gt;

&lt;h2 id=&quot;quick_signup&quot;&gt;Quick signup&lt;/h2&gt;

&lt;p&gt;Instead of allowing people easy login by connecting with account they already have on other sites, I’ve chosen to not ask much on signup. I’ve included a sign-up box on the main page with three fields: the desired username, password and password confirmation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/blog/img/quick-signup.png&quot; alt=&quot;signup form&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All other information (real name, email address, birth day) can be entered when desired.&lt;/p&gt;

&lt;h2 id=&quot;other_notes&quot;&gt;Other notes&lt;/h2&gt;

&lt;p&gt;I don’t have a certificate yet so I’m not using HTTPS. This makes authentication rather insecure so I’ll have to get one later.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Deployment</title>
   <link href="http://multilatex.com/blog/deployment"/>
   <updated>2013-12-11T00:00:00+02:00</updated>
   <id>http://multilatex.com/blog/deployment</id>
   <content type="html">
&lt;p&gt;I have the &lt;a href=&quot;http://multilatex.com&quot;&gt;multilatex.com&lt;/a&gt; domain and that’s where I’ll be building the web site. I’ll host it on Ubuntu Server in &lt;a href=&quot;http://en.wikipedia.org/wiki/Amazon_Elastic_Compute_Cloud&quot;&gt;Amazon EC2&lt;/a&gt; because they give a micro instance and static IP for free for a year.&lt;/p&gt;

&lt;p&gt;I’m a fan of continuous integration (although I haven’t had a change to work in large environments) and I like to automate all my building and deploying with (more or less) robust scripts.&lt;/p&gt;

&lt;p&gt;Since this is a Node project, I’ll try write everything in Node, including the server-side scripts for installing, syncing and the rest. I dislike Bash, so I’ll try to avoid it as much as possible.&lt;/p&gt;

&lt;h2 id=&quot;configuring_the_server&quot;&gt;Configuring the server&lt;/h2&gt;

&lt;p&gt;First, the server needs to have installed the required packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager#ubuntu-mint-elementary-os&quot;&gt;Node&lt;/a&gt;&lt;/strong&gt; (this is the guide for new versions on Ubuntu);&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/#install-mongodb&quot;&gt;MongoDB&lt;/a&gt;&lt;/strong&gt; (also new versions).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, EC2 uses &lt;code&gt;.pem&lt;/code&gt; keys for login with SSH, but that complicates scripts so I just appended the server’s authorized keys for &lt;a href=&quot;http://www.linuxproblem.org/art_9.html&quot;&gt;automatic SSH logins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since I use the terminal often I like to create aliases in &lt;code&gt;~/.bashrc&lt;/code&gt; for fast SSH access:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nb'&gt;alias &lt;/span&gt;&lt;span class='nv'&gt;multilatex&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;ssh ubuntu@multilatex.com&amp;quot;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running servers as root or a human user is considered dangerous, so I create a user (called appropriately &lt;code&gt;multilatex&lt;/code&gt;) just to run the Node server.&lt;/p&gt;

&lt;p&gt;This user, of course, can’t bind to port 80, so I bind to 3000 instead and use &lt;code&gt;iptables&lt;/code&gt; for redirection.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;sudo iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 3000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;upstart&quot;&gt;Upstart&lt;/h2&gt;

&lt;p&gt;Something I’ve never used before is &lt;a href=&quot;http://en.wikipedia.org/wiki/Upstart&quot;&gt;Upstart&lt;/a&gt;. It has replaced &lt;code&gt;init&lt;/code&gt; in Ubuntu for a while now, and after having written this simple configuration file I understand why: it’s easy to make a service out of a program and control it.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='c'&gt;#!upstart&lt;/span&gt;

description &lt;span class='s2'&gt;&amp;quot;multilatex node server&amp;quot;&lt;/span&gt;
author &lt;span class='s2'&gt;&amp;quot;Paul Nechifor &amp;lt;paul@nechifor.net&amp;gt;&amp;quot;&lt;/span&gt;

start on startup
stop on shutdown

&lt;span class='c'&gt;# Run as an unprivileged user.&lt;/span&gt;
setuid multilatex
setgid multilatex

&lt;span class='c'&gt;# Automatically respawn if it dies, but abandon if more than 10 times in 5 secs.&lt;/span&gt;
respawn
respawn limit 10 5

script
    &lt;span class='nb'&gt;export &lt;/span&gt;&lt;span class='nv'&gt;HOME&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;/home/multilatex&amp;quot;&lt;/span&gt;
    &lt;span class='nv'&gt;NOW&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;`date -u +%Y%m%d-%H%M%S`&amp;quot;&lt;/span&gt;
    &lt;span class='nb'&gt;exec&lt;/span&gt; /usr/bin/node /home/multilatex/apps/multilatex/app/app.js &amp;gt;&amp;gt; /home/multilatex/logs/&lt;span class='nv'&gt;$NOW&lt;/span&gt;.log 2&amp;gt;&lt;span class='p'&gt;&amp;amp;&lt;/span&gt;1 
end script
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;scripts&quot;&gt;Scripts&lt;/h2&gt;

&lt;p&gt;The basic control tool I’ve written is &lt;a href=&quot;https://github.com/paul-nechifor/multilatex/blob/master/tools/ml&quot;&gt;ml&lt;/a&gt;. The commands so far are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;install&lt;/strong&gt;, which:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;creates the user and directories if they are needed;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;rsync&lt;/code&gt;s the modified files to the installation destination;&lt;/li&gt;

&lt;li&gt;restarts the service;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;deploy&lt;/strong&gt;, which:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rsync&lt;/code&gt;s the modified files to the remote server;&lt;/li&gt;

&lt;li&gt;uses the install command on the remote server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Foundation</title>
   <link href="http://multilatex.com/blog/foundation"/>
   <updated>2013-12-10T00:00:00+02:00</updated>
   <id>http://multilatex.com/blog/foundation</id>
   <content type="html">
&lt;p&gt;After having laid down the major ideas of the &lt;a href=&quot;/blog/design&quot;&gt;design&lt;/a&gt; and the &lt;a href=&quot;/blog/plan&quot;&gt;plan&lt;/a&gt; I made the first commit of the project. It will be hosted on GitHub on the &lt;a href=&quot;https://github.com/paul-nechifor/multilatex&quot;&gt;Multilatex repository&lt;/a&gt;. These are some of the first additions.&lt;/p&gt;

&lt;p&gt;I added some of the &lt;a href=&quot;/blog/design#stack&quot;&gt;stack requirements&lt;/a&gt; in &lt;code&gt;package.json&lt;/code&gt; and some of the &lt;a href=&quot;/blog/design#frontend_libraries&quot;&gt;front-end libraries&lt;/a&gt; to the static part of the web site.&lt;/p&gt;

&lt;h2 id=&quot;directory_structure&quot;&gt;Directory structure&lt;/h2&gt;

&lt;p&gt;One particularly important aspect is separating the main code from the configuration. I’ve put them before together and it turns out to be problematic for deployment.&lt;/p&gt;

&lt;p&gt;I remember writing a series of bad projects that depended on having the configuration in the project’s root directory and starting the executable or script only from its directory.&lt;/p&gt;

&lt;p&gt;Another is preparing for the auxiliary code/tools and not adding them as an afterthought.&lt;/p&gt;

&lt;h2 id=&quot;blog&quot;&gt;Blog&lt;/h2&gt;

&lt;p&gt;I’ve previously hosted this blog as a subdomain on &lt;code&gt;blog.multilatex.com&lt;/code&gt;, but now I’ve moved it as a subdirectory to &lt;a href=&quot;http://multilatex.com/blog&quot;&gt;&lt;code&gt;multilatex.com/blog&lt;/code&gt;&lt;/a&gt; since it’s considered better.&lt;/p&gt;

&lt;h2 id=&quot;legal_stuff&quot;&gt;Legal stuff&lt;/h2&gt;

&lt;p&gt;I’ve added the &lt;a href=&quot;https://github.com/paul-nechifor/multilatex/LICENSE&quot;&gt;MIT license&lt;/a&gt; to the code since it’s the most permissive and the &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;Creative Commons BY-NC-SA&lt;/a&gt; to the blog.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Plan</title>
   <link href="http://multilatex.com/blog/plan"/>
   <updated>2013-12-09T00:00:00+02:00</updated>
   <id>http://multilatex.com/blog/plan</id>
   <content type="html">
&lt;p&gt;I’m wary of giving specific dates for building the website so I’ll organize myself by listing a series of steps that I need to accomplish.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Laying the foundation (&lt;a href=&quot;/blog/foundation&quot;&gt;post&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Setting up the deployment process (&lt;a href=&quot;/blog/deployment&quot;&gt;post&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Creating the user authentication (&lt;a href=&quot;/blog/authentication&quot;&gt;post&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Adding and sandboxing Latex (&lt;a href=&quot;/blog/sandboxing-latex&quot;&gt;post&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Creating projects for users.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Creating the single-page interface.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Adding commit chains for projects.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;em&gt;to be continued as more is completed&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Design</title>
   <link href="http://multilatex.com/blog/design"/>
   <updated>2013-12-08T00:00:00+02:00</updated>
   <id>http://multilatex.com/blog/design</id>
   <content type="html">
&lt;p&gt;In this document I’ll describe the design of Multilatex, a collaborative web editor for Latex projects. This is what I’ve chosen to develop as my practical project in my second year of my master’s degree studies at &lt;a href=&quot;http://www.infoiasi.ro/&quot;&gt;FCS&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;key_audience&quot;&gt;Key audience&lt;/h2&gt;

&lt;p&gt;The main audience will be people who have used Latex before and want to move to the cloud and/or want better collaboration.&lt;/p&gt;

&lt;h2 id=&quot;inspiration&quot;&gt;Inspiration&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://speakerdeck.com/&quot;&gt;Speaker Deck&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.sharelatex.com/&quot;&gt;ShareLaTeX&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.scribd.com/&quot;&gt;Scribd&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://medium.com/&quot;&gt;Medium&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;h3 id=&quot;landing_page&quot;&gt;Landing page&lt;/h3&gt;

&lt;p&gt;The landing page will be the first page and its purpose is to explain as fast as possible what the web site does and to convince users to give it a try.&lt;/p&gt;

&lt;p&gt;The main feature will be a jumbotron with a few big words, a shot description, a screenshot of the editor, and a sign up button.&lt;/p&gt;

&lt;p&gt;This will be followed by columns showcasing some important features.&lt;/p&gt;

&lt;p&gt;Other things to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fast sign in and registration.&lt;/li&gt;

&lt;li&gt;A video tutorial of the site and editor.&lt;/li&gt;

&lt;li&gt;Social icons, especially the GitHub one.&lt;/li&gt;

&lt;li&gt;Maybe testimonials in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;editor&quot;&gt;Editor&lt;/h3&gt;

&lt;p&gt;The editor page is where users will spend most of their time. It will be a single page app with the menu at the top. The editor is only accessible to projects you have access to.&lt;/p&gt;

&lt;p&gt;The editor will occupy the full-width of the page and it will feature a more compact estethic.&lt;/p&gt;

&lt;p&gt;The workspace will consist of multiple windows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the file viewer;&lt;/li&gt;

&lt;li&gt;the text editor;&lt;/li&gt;

&lt;li&gt;the PDF output;&lt;/li&gt;

&lt;li&gt;the compilation output;&lt;/li&gt;

&lt;li&gt;and maybe others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any of these can be hidden and their size can be modified. There will be a menu that will deal with organizing the workspace.&lt;/p&gt;

&lt;p&gt;The text editor will also have a menu that will deal with its settings (tab size, font size, color theme and others).&lt;/p&gt;

&lt;h3 id=&quot;file_management&quot;&gt;File management&lt;/h3&gt;

&lt;p&gt;A project can contain multiple files. Primarily it contains &lt;code&gt;.tex&lt;/code&gt; files and then image resource files, but others are also possible. I need to set a limit on the size of files and projects.&lt;/p&gt;

&lt;p&gt;The file viewer in the editor will have to contain a tree structure for listing and manipulating the files.&lt;/p&gt;

&lt;h3 id=&quot;history&quot;&gt;History&lt;/h3&gt;

&lt;p&gt;Every project will have a history of commits. The latest commit is the default state of the project (but previous ones can be seen).&lt;/p&gt;

&lt;p&gt;The editor always works on the most recent state of the project which is called the head. The head is always private.&lt;/p&gt;

&lt;p&gt;History manipulations are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;committing, which adds the head as a new state and the head stays intact;&lt;/li&gt;

&lt;li&gt;reverting, which adds a previous state as a new state and the head becomes that;&lt;/li&gt;

&lt;li&gt;merging, which adds the latest state from another project as a new state and the head becomes that;&lt;/li&gt;

&lt;li&gt;cherry-picking (in the future), which only merges specific parts;&lt;/li&gt;

&lt;li&gt;deleting, which removes one of the states.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A user can issue a pull request to another project (requesting the merger of his project). Also, a user can always merge other projects into his.&lt;/p&gt;

&lt;h3 id=&quot;file_and_commit_comparisons&quot;&gt;File and commit comparisons&lt;/h3&gt;

&lt;p&gt;There will be a page that will show differences between two arbitrary files (even across projects and commits) and between all the files in two arbitrary commits.&lt;/p&gt;

&lt;p&gt;This will be useful for reviewing before merging.&lt;/p&gt;

&lt;h3 id=&quot;importing_and_exporting&quot;&gt;Importing and exporting&lt;/h3&gt;

&lt;p&gt;There will always be the options to download a commit as a ZIP file, and to create a new project by uploading a ZIP.&lt;/p&gt;

&lt;h3 id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;p&gt;One of the key requirements is support for comments. One idea is to use the &lt;a href=&quot;http://www.tex.ac.uk/ctan/macros/latex/contrib/todonotes/todonotes.pdf&quot;&gt;todonotes&lt;/a&gt; package so that they are included in the PDF and maybe also listing them separately.&lt;/p&gt;

&lt;h3 id=&quot;gallery&quot;&gt;Gallery&lt;/h3&gt;

&lt;p&gt;The gallery will be the showcasing of the popular projects. It’s purpose, in a way, is to demonstrate to users the power of the site by listing some of the best projects.&lt;/p&gt;

&lt;p&gt;I haven’t decided on any popularity metric, but it should take into account the number of contributors, commits, clones, comments, stars, downloads, and views.&lt;/p&gt;

&lt;p&gt;The gallery should probably be navigable as a list and as a grid. The grid would include the project name, author, stars and the biggest element would be a large thumbnail of the rendered pages. This should be a dynamic thumbnail similar to &lt;a href=&quot;https://speakerdeck.com/&quot;&gt;Speaker Deck&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;templates&quot;&gt;Templates&lt;/h3&gt;

&lt;p&gt;Templates will be projects (belonging to the site) that are meant to be cloned to provide a starting point for new projects.&lt;/p&gt;

&lt;h3 id=&quot;user_pages&quot;&gt;User pages&lt;/h3&gt;

&lt;p&gt;I do not intend to make a site with social-like features so the page for a user will only be a listing of his public metadata, projects and activity.&lt;/p&gt;

&lt;h3 id=&quot;notifications&quot;&gt;Notifications&lt;/h3&gt;

&lt;p&gt;The user tab will list all the notifications for a user. The main notifications will be pull requests.&lt;/p&gt;

&lt;h3 id=&quot;administration&quot;&gt;Administration&lt;/h3&gt;

&lt;p&gt;On the web site side, I don’t plan on having many admin features. Maybe just banning users in case of bad behavior.&lt;/p&gt;

&lt;p&gt;On the OS side, I will have to have some tools to manage deployment, migration, the Latex tools and other such things.&lt;/p&gt;

&lt;h3 id=&quot;other_features&quot;&gt;Other features&lt;/h3&gt;

&lt;p&gt;The site will require minimal data input from users. What I mean by that is that it should have sensible defaults to most things and should always be open to altering them.&lt;/p&gt;

&lt;p&gt;I should also consider adding a tutorial page for Latex for people who have never used it. It could be a source of incoming links.&lt;/p&gt;

&lt;h2 id=&quot;site_structure&quot;&gt;Site structure&lt;/h2&gt;

&lt;p&gt;The site will always have a menu on top. Registered users will have a tab with their name aligned to the right from where they can manage their account.&lt;/p&gt;

&lt;h3 id=&quot;navigation&quot;&gt;Navigation&lt;/h3&gt;

&lt;p&gt;General ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The main page will lead to signing in, signing up or browsing projects.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Signing in will lead you to your page, or whichever page you were on when you clicked on signing in.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Signing up will also lead to your page, but if you have no projects it will also show a short tutorial.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;url_design&quot;&gt;URL design&lt;/h3&gt;

&lt;p&gt;I believe &lt;a href=&quot;http://warpspire.com/posts/url-design/&quot;&gt;URL design&lt;/a&gt; is important and I love how sites like GitHub have rememberable URLs. For example, &lt;code&gt;paul-nechifor&lt;/code&gt; is my username and &lt;code&gt;reddit-cloud&lt;/code&gt; is one of my projects, so the URL for the repo is simply &lt;code&gt;github.com/paul-nechifor/reddit-cloud&lt;/code&gt;. This poses the problem of collisions, but it can be solved &lt;a href=&quot;https://gist.github.com/caseyohara/1453705&quot;&gt;reserving a list of usernames&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/&lt;/code&gt; will be the landing page.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;/:user&lt;/code&gt; will the user page for &lt;code&gt;:user&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;/:user?tab=projects&lt;/code&gt; will list the projects of &lt;code&gt;:user&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;/:user/:project&lt;/code&gt; will be the project page for &lt;code&gt;:project&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;/:user/:project/edit&lt;/code&gt; will be the editor page for &lt;code&gt;:project&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;/:user/:project/download/pdf&lt;/code&gt; will download the PDF file.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;/:user/:project/commits&lt;/code&gt; will list all the commits.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;/:user/:project/commit/:number/download/zip&lt;/code&gt; will download commit &lt;code&gt;:number&lt;/code&gt; as a ZIP file.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;/browse&lt;/code&gt; will show the gallery overview.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;/browse?cat=templates&lt;/code&gt; will list templates.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;/browse?ord=new&lt;/code&gt; will list the newest projects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nonfunctional_requirements&quot;&gt;Non-functional requirements&lt;/h2&gt;

&lt;p&gt;These are some other things I need to consider.&lt;/p&gt;

&lt;h3 id=&quot;mobile_devices&quot;&gt;Mobile devices&lt;/h3&gt;

&lt;p&gt;Since the site will have a complex workflow, I do not intend to make some parts accessible for mobile devices. In particular, this means the editor.&lt;/p&gt;

&lt;p&gt;But some functionalities have to be mobile ready:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the landing page;&lt;/li&gt;

&lt;li&gt;authentication;&lt;/li&gt;

&lt;li&gt;browsing, viewing and downloading documents.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;metrics&quot;&gt;Metrics&lt;/h3&gt;

&lt;p&gt;I’ll use &lt;a href=&quot;http://www.google.com/analytics/&quot;&gt;Google Analytics&lt;/a&gt; to measure usage and traffic.&lt;/p&gt;

&lt;h3 id=&quot;stylistic_choices&quot;&gt;Stylistic choices&lt;/h3&gt;

&lt;p&gt;I’ll be going with flat design, mostly because I like clean design, but not to the point of complete lack of affordances. To this end I’ll be using &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap 3&lt;/a&gt; with some tweaking. I may, however, choose a particular theme if I find one.&lt;/p&gt;

&lt;h2 id=&quot;technical_specifications&quot;&gt;Technical specifications&lt;/h2&gt;

&lt;p&gt;The project I’m planning is quite complex so choosing the right technologies is important.&lt;/p&gt;

&lt;h3 id=&quot;stack&quot;&gt;Stack&lt;/h3&gt;

&lt;p&gt;This is the web stack I intend to use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.ubuntu.com/server/&quot;&gt;Ubuntu Server&lt;/a&gt;&lt;/strong&gt; — Linux is an obvious choice and Ubuntu Server has many easy to install packages.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://nodejs.org/&quot;&gt;Node&lt;/a&gt;&lt;/strong&gt; — A good mix of fast, dynamic and stable.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt;&lt;/strong&gt; — The best framework for Node.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://jade-lang.com/&quot;&gt;Jade&lt;/a&gt;&lt;/strong&gt; — Nice templates with beautiful syntax.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://learnboost.github.io/stylus/&quot;&gt;Stylus&lt;/a&gt;&lt;/strong&gt; — Powerful, and again, with beautiful syntax.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt;&lt;/strong&gt; — I’m not very sold on NoSQL, particularly because of the lack of transactions, but on the other hand drivers for other databases in Node aren’t very feature rich and prototyping will be faster without schemas.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;frontend_libraries&quot;&gt;Front-end libraries&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap 3&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://ace.c9.io/&quot;&gt;Ace&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Ideas</title>
   <link href="http://multilatex.com/blog/ideas"/>
   <updated>2013-11-04T00:00:00+02:00</updated>
   <id>http://multilatex.com/blog/ideas</id>
   <content type="html">
&lt;p&gt;The &lt;a href=&quot;http://ideasource.blankdots.com/2013/09/online-latex-editor/&quot;&gt;starting requirements&lt;/a&gt; are:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Develop a web editor/compiler for latex files, with support for collaborative editing and tracking changes. Also a comment system would be helpful to user in order to keep track of both the changes but also what other users commented and when (and in regards to what paragraph).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are multiple Latex editors on the web, but these are some of the problems I’m trying to solve. I haven’t yet decided fully on what the best course of action is for each.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Handling of big files.&lt;/strong&gt; Usually a big Latex document is split into multiple &lt;code&gt;.tex&lt;/code&gt; files and the main one includes the rest. This is what &lt;a href=&quot;https://www.sharelatex.com&quot;&gt;ShareLaTeX&lt;/a&gt; does, but I think it’s bad. These files usually model the chapters, sections and subsections. It would be easier if the editor recognized these and selecting one would give you a partition of the bigger file to edit. This would mean you wouldn’t have to manually manage files.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Collaborative editing.&lt;/strong&gt; There are two possibilities I see: &lt;em&gt;real-time editing&lt;/em&gt; (like Google Docs) or &lt;em&gt;commit-based editing&lt;/em&gt; (like GitHub). Since Latex doesn’t function like a WYSIWYG editor, a commit-based one might seem better, but it would be frustrating to have to deal the all the merging. The problem with real-time editing is that it complicates undoing and many others like how do you decide when to issue another preview and label a revision? (Maybe just compile it and see if it succeeds.)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Tracking changes.&lt;/strong&gt; With commit-based edits it would be simple, but what about real-time? Should edits be flattened from time to time? How would a single person’s edits be reviewed? There should be the possibility to open two PDFs side by side just to compare the end results (not just the source). The two PDFs would contain highlighting of modifications.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Division of work.&lt;/strong&gt; An idea is to be able to lock certain parts so that they are only editable to a single person (allocating that to them). But is it worth it? This wouldn’t work as a security feature, it would just help divide work.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Output formats.&lt;/strong&gt; Should the output format be only PDF (and maybe similar formats like DVI and PS) or should I also try to output to a limited HTML. This could be useful for crawlers.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Comments by people who don’t know Latex.&lt;/strong&gt; It’s important to let people who don’t know Latex be able to make comments on the content itself. But should this be on a certain revision of the output PDF (like a note pined to (x,y) in the document). Should all the paragraphs be delimited and somebody could add notes tied to a paragraph like on &lt;a href=&quot;https://medium.com/&quot;&gt;medium.com&lt;/a&gt;? The best way would be to select the text in the PDF and leave a note for that selection (like in Adobe Acrobat), but might be very hard if not impossible since it would require the ability to understand the PDF. Should comments be on revisions or associated with a document and they can be added and removed?&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;The Latex compiler.&lt;/strong&gt; Should I use a fully browser-based Latex compiler or compile on the server? The best solution is probably the later since JavaScript Latex is very slow, but I might use it for limited purposes such as displaying fast previews when editing small subsections (this would create a sort of WYSIWYG effect).&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Import and export.&lt;/strong&gt; The site should be able to import archives with &lt;code&gt;.tex&lt;/code&gt; files and resources and export them back when needed. This is a basic feature.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;The technology.&lt;/strong&gt; I plan to write the back-end with Node.js and use MongoDB for storage. It may not be the best choice in terms of speed, but it’s better for the prototype since it’s faster to develop and I can change curse later if need be.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideas for the distant future:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multi-window editor.&lt;/strong&gt; You place the editor in one window on one monitor and the preview on another monitor.&lt;/li&gt;

&lt;li&gt;Heavily simplified &lt;strong&gt;editor for use on tablets&lt;/strong&gt;.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Automatic document-sensitive completion.&lt;/strong&gt; Typing &lt;code&gt;\&lt;/code&gt; would show possible completions including macros defined in the document.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
</feed>
